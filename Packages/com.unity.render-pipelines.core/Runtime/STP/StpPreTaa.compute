#pragma kernel StpPreTaa

#pragma multi_compile _ ENABLE_DEBUG_MODE

#pragma multi_compile _ UNITY_DEVICE_SUPPORTS_NATIVE_16BIT

#pragma multi_compile _ DISABLE_TEXTURE2D_X_ARRAY

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"

#define STP_GROUP_SIZE 64
#define STP_DIL 1
#define STP_SAA 1

#include "Packages/com.unity.render-pipelines.core/Runtime/STP/StpCommon.hlsl"

//
// Input
//

TEXTURE2D_X(_StpIntermediateConvergence);

//
// Intermediate Output
//

RW_TEXTURE2D_X(float, _StpIntermediateWeights);

//
// History Input/Output
//

TEXTURE2D_X(_StpLuma);
RW_TEXTURE2D_X(float, _StpConvergence);

// DIL
#if defined(STP_16BIT)
StpH4 StpDilCon4H(StpF2 p) { return (StpH4)GATHER_RED_TEXTURE2D_X(_StpIntermediateConvergence, s_point_clamp_sampler, p); }
#endif
#if defined(STP_32BIT)
StpMF4 StpDilCon4F(StpF2 p) { return (StpMF4)GATHER_RED_TEXTURE2D_X(_StpIntermediateConvergence, s_point_clamp_sampler, p); }
#endif

// SAA
#if defined(STP_16BIT)
StpH4 StpSaaLum4H(StpF2 p) { return (StpH4)GATHER_RED_TEXTURE2D_X(_StpLuma, s_point_clamp_sampler, p); }
#endif
#if defined(STP_32BIT)
StpMF4 StpSaaLum4F(StpF2 p) { return (StpMF4)GATHER_RED_TEXTURE2D_X(_StpLuma, s_point_clamp_sampler, p); }
#endif

#define THREADING_BLOCK_SIZE STP_GROUP_SIZE
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Threading.hlsl"

[numthreads(STP_GROUP_SIZE, 1, 1)]
void StpPreTaa(Threading::Group group)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(group.groupID.z);

    uint2 pos = (group.groupID.xy << 3) + group.RemapLaneTo8x16();

    uint2 dilationSize = asuint(_StpDilConstants0).zw;

    // The dilation logic only runs for a subset of the input image size
    // TODO: We could probably make this a scalar branch based on group id alone? Might yield some improvements?
    if (all(pos < dilationSize))
    {
        half convergence;

#if defined(STP_16BIT)
        StpDilH(
#else
        StpDilF(
#endif
            convergence,

            pos,

            asuint(_StpDilConstants0)
        );

        _StpConvergence[COORD_TEXTURE2D_X(pos)] = convergence;
    }

    half weights;

#if defined(STP_16BIT)
    StpSaaH(
#else
    StpSaaF(
#endif
        weights,

        pos,

        // SAA uses the same constants as the pattern matcher
        asuint(_StpSetupConstants0)
    );

    _StpIntermediateWeights[COORD_TEXTURE2D_X(pos)] = weights;
}

